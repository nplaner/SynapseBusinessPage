"use strict";
/* eslint-disable import/no-cycle */
/* eslint-disable import/extensions */
/* eslint-disable no-param-reassign */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uses = exports.affects = exports.schema = exports.expose = void 0;
var Validatable_1 = require("./Validatable");
var Controller_1 = require("../control/Controller");
var Schema_1 = require("../state/Schema");
var utility_1 = require("../utility");
var toController = function (target, props) {
    if (props === void 0) { props = {}; }
    return Object.assign(target instanceof Controller_1.default ? target : new Controller_1.default(target), props);
};
var Controllable = /** @class */ (function (_super) {
    __extends(Controllable, _super);
    function Controllable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Controllable.root = function () {
        throw new Error("Classes that extend Controllable must implement the 'root' method.");
    };
    Controllable.$endpoint = function (options, target) {
        var controller = new Controller_1.default(target);
        if (options.uses) {
            this.$uses(options.uses, controller);
        }
        if (options.affects) {
            this.$affects(options.affects, controller);
        }
        if (options.schema) {
            this.$schema(options.schema, controller);
        }
        if (options.pattern) {
            if (Array.isArray(options.authorizer)) {
                this.$expose.apply(this, __spreadArrays([options.pattern], options.authorizer));
            }
            else {
                this.$expose(options.pattern, options.authorizer);
            }
        }
        return controller;
    };
    Controllable.$expose = function (endpoint) {
        var _this = this;
        var chain = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            chain[_i - 1] = arguments[_i];
        }
        var Class = this;
        var _a = utility_1.parseEndpoint(endpoint), method = _a.method, path = _a.path;
        if (!method || !path) {
            throw new Error("Invalid endpoint '" + endpoint + "'.");
        }
        if (!chain.length) {
            throw new Error("Expected at least one function in 'chain'.");
        }
        var target = chain.pop();
        var authorizer = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utility_1.invokeChain(chain, args)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, Array.isArray(result) ? result[0] : result];
                }
            });
        }); };
        var pattern = utility_1.mergePaths(Class.root(), path);
        return toController(target, { authorizer: authorizer }).expose(method, pattern);
    };
    Controllable.$schema = function (from, target) {
        var Class = this;
        var schema = from instanceof Schema_1.default ? from : new Schema_1.default(from);
        return toController(target, { schema: schema });
    };
    Controllable.$affects = function (paths, target) {
        var Class = this;
        var root = Class.root();
        var dependents = paths.map(function (path) { return utility_1.mergePaths(root, path); });
        return toController(target, { dependents: dependents });
    };
    Controllable.$uses = function (paths, target) {
        var Class = this;
        var root = Class.root();
        var dependencies = paths.map(function (path) { return utility_1.mergePaths(root, path); });
        return toController(target, { dependencies: dependencies });
    };
    return Controllable;
}(Validatable_1.default));
exports.default = Controllable;
// decorators:
exports.expose = function (path) {
    var authorizers = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        authorizers[_i - 1] = arguments[_i];
    }
    return function (Class, methodName, descriptor) {
        var method = descriptor.value; // class method to be decorated
        descriptor.value = Class.$expose.apply(Class, __spreadArrays([path], authorizers, [method]));
    };
};
exports.schema = function (source) {
    return function (Class, methodName, descriptor) {
        var method = descriptor.value; // class method to be decorated
        descriptor.value = Class.$schema(source, method);
    };
};
exports.affects = function () {
    var paths = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        paths[_i] = arguments[_i];
    }
    return function (Class, methodName, descriptor) {
        var method = descriptor.value; // class method to be decorated
        descriptor.value = Class.$affects(paths, method);
    };
};
exports.uses = function () {
    var paths = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        paths[_i] = arguments[_i];
    }
    return function (Class, methodName, descriptor) {
        var method = descriptor.value; // class method to be decorated
        descriptor.value = Class.$uses(paths, method);
    };
};
