/* eslint-disable prefer-const */
/* eslint-disable no-restricted-syntax */
/* eslint-disable guard-for-in */
/* eslint-disable max-classes-per-file */
/* eslint-disable no-param-reassign */
/* eslint-disable no-underscore-dangle */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var meta = function (assign) {
    return function (target) {
        for (var key in assign) {
            target["$" + key] = assign[key];
        }
    };
};
var Test = /** @class */ (function () {
    function Test() {
    }
    Test = __decorate([
        meta({
            status: 200,
            test: function () { },
        })
    ], Test);
    return Test;
}());
var Deriv = /** @class */ (function (_super) {
    __extends(Deriv, _super);
    function Deriv() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Deriv = __decorate([
        meta({
            message: "hello",
            name: function () { },
        })
    ], Deriv);
    return Deriv;
}(Test));
console.log(Deriv);
