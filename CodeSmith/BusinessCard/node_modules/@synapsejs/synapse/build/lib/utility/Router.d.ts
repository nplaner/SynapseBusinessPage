/** Generic wrapper for an ```express``` router. Associates _endpoint templates_ in the format ```METHOD /path/:param``` with handler functions. */
export default class Router {
    /** An ```express``` router */
    router: Function;
    transform: Function;
    constructor(transform?: Function);
    /** Associates a callback function with an HTTP method and _resource path_
     * @param method An HTTP method
     * @param path A _route_ in the ```express``` syntax (e.g ```/user/:id```)
     * @param callback A callback function
     */
    declare(method: string, path: string, callback: Function): void;
    /** _**(async)**_ Attempts to execute a request using the constructed router.
     * @param method An HTTP method
     * @param path A _resource path_
     * @param args An object containing the arguments to be passed to the callback method, if one is found.
     * @returns A promise that evaluates to the result of invoking the callback function associated with the provided method and path, or a ```NOT_FOUND``` {@linkcode State} if no matching _endpoint_ exists.
     */
    request(method: string, path: string, ...args: Array<any>): Promise<any>;
    getOptions(path: string): Promise<unknown>;
}
