/**
 * Verifies that all elements of the input collection are of type 'Type'.
 * @param Type A constructor function
 * @param col The object or array to search
 * @param assert If true, the function will throw an error in case of false result.
 * @returns A boolean
 */
export declare const isCollectionOf: (type: any, col: object, assert?: boolean) => boolean;
export declare const tryParseJSON: (json: string) => any;
export declare const requireAll: (path: string) => any[];
export declare const mergePaths: (...paths: any[]) => string;
export declare const parseEndpoint: (endpoint: string, custom?: Array<string>, root?: string) => {
    method?: undefined;
    path?: undefined;
} | {
    method: string;
    path: string;
};
export declare const routeToPath: (route: string, args: object, query?: boolean) => string;
export declare const invokeChain: (middleware: Array<Function>, ...args: any[]) => Promise<any[]>;
export declare const makeChain: () => {
    (...args: any[]): Promise<void>;
    add(...middleware: any[]): number;
};
