import Cache from "../utility/Cache";
import State from "./State";
import Relation from "../utility/Relation";
import Operation from "./Operation";
/** Represents an instance of an API server. Acts as an abstraction layer between network protocols and resource business logic. Manages caching, subscription, and state management of resources. */
export default class Manager extends Cache {
    /** Maps _resource paths_ to _query strings_. */
    static dependents: Relation<string, string>;
    /** Maps clients (represented by callback functions) to _query strings_ and vice versa. */
    static subscriptions: Relation<Function, string>;
    static listeners: Set<Function>;
    static remove(query: string): void;
    static set(query: string, source?: Function): Promise<State>;
    static invalidate(path: string, flags?: object): void;
    static execute(op: Operation, args: object, flags?: object): Promise<any>;
    static subscribe(client: Function, query?: string): boolean;
    static unsubscribe(client: Function, query?: string): void;
}
