"use strict";
/* eslint-disable no-underscore-dangle */
/* eslint-disable camelcase */
/* eslint-disable import/no-cycle */
/* eslint-disable import/extensions */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Cache_1 = require("../utility/Cache");
var State_1 = require("./State");
var Relation_1 = require("../utility/Relation");
var utility_1 = require("../utility");
/** Represents an instance of an API server. Acts as an abstraction layer between network protocols and resource business logic. Manages caching, subscription, and state management of resources. */
var Manager = /** @class */ (function (_super) {
    __extends(Manager, _super);
    function Manager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Manager.remove = function (query) {
        var _this = this;
        _super.remove.call(this, query);
        this.dependents.unlink(null, query);
        this.subscriptions.to(query).forEach(function (client) {
            _this.unsubscribe(client, query);
            client(query, null);
        });
    };
    Manager.set = function (query, source) {
        if (source === void 0) { source = null; }
        return __awaiter(this, void 0, void 0, function () {
            var state;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.set.call(this, query, source)];
                    case 1:
                        state = _a.sent();
                        if (state.isError()) {
                            this.remove(query);
                            return [2 /*return*/, state];
                        }
                        this.dependents.unlink(null, query);
                        state.$dependencies().forEach(function (path) {
                            _this.dependents.link(path, query);
                        });
                        this.subscriptions.to(query).forEach(function (client) {
                            client(query, state);
                        });
                        return [2 /*return*/, state];
                }
            });
        });
    };
    Manager.invalidate = function (path, flags) {
        var _this = this;
        if (flags === void 0) { flags = {}; }
        this.listeners.forEach(function (client) {
            var state = State_1.default.OK();
            state.$flags(flags);
            client(path, state);
        });
        var queries = this.dependents.from(path);
        queries.forEach(function (_query) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, this.set(_query)];
        }); }); });
    };
    Manager.execute = function (op, args, flags) {
        if (flags === void 0) { flags = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var query, calc, state;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = utility_1.routeToPath(op.path, args, true);
                        calc = function () { return __awaiter(_this, void 0, void 0, function () {
                            var state;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, op(args)];
                                    case 1:
                                        state = _a.sent();
                                        state.$query(query);
                                        state.$flags(flags);
                                        return [2 /*return*/, state];
                                }
                            });
                        }); };
                        if (op.isCacheable()) {
                            if (this.has(query)) {
                                return [2 /*return*/, this.get(query)];
                            }
                            return [2 /*return*/, this.set(query, calc)];
                        }
                        return [4 /*yield*/, calc()];
                    case 1:
                        state = _a.sent();
                        op.dependents.forEach(function (path) { return _this.invalidate(path, flags); });
                        return [2 /*return*/, state];
                }
            });
        });
    };
    Manager.subscribe = function (client, query) {
        if (query === void 0) { query = null; }
        if (query === null) {
            this.listeners.add(client);
            return true;
        }
        if (!this.has(query)) {
            return false;
        }
        this.subscriptions.link(client, query);
        return true;
    };
    Manager.unsubscribe = function (client, query) {
        if (query === void 0) { query = null; }
        if (query === null) {
            this.listeners.delete(client);
        }
        this.subscriptions.unlink(client, query);
    };
    /** Maps _resource paths_ to _query strings_. */
    Manager.dependents = new Relation_1.default();
    /** Maps clients (represented by callback functions) to _query strings_ and vice versa. */
    Manager.subscriptions = new Relation_1.default();
    Manager.listeners = new Set();
    return Manager;
}(Cache_1.default));
exports.default = Manager;
