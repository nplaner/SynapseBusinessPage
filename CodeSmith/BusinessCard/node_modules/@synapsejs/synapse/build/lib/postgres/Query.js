"use strict";
/* eslint-disable lines-between-class-members */
/* eslint-disable prefer-destructuring */
Object.defineProperty(exports, "__esModule", { value: true });
var Query = /** @class */ (function () {
    function Query() {
    }
    Query.$ = function (frags) {
        if (frags === void 0) { frags = null; }
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        if (!frags) {
            return ["", []];
        }
        if (typeof frags === "string") {
            return [frags, []];
        }
        var result = frags.shift();
        frags.forEach(function (frag, i) {
            result += "$" + (i + 1) + frag;
        });
        return [result, values];
    };
    Query.prototype.from = function (table) {
        this.table = Array.isArray(table) ? table[0] : table;
        return this;
    };
    Query.prototype.into = function (table) {
        return this.from(table);
    };
    Query.prototype.where = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (Array.isArray(args[0])) {
            this.conditions = Query.$.apply(Query, args);
        }
        else if (typeof args[0] === "object") {
            var data = args[0];
            var text_1 = [];
            Object.keys(data).forEach(function (key, i) {
                text_1.push(key + "=$" + (i + 1));
            });
            this.conditions = [text_1.join(", "), Object.values(data)];
        }
        return this;
    };
    Query.prototype.select = function () {
        var columns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columns[_i] = arguments[_i];
        }
        if (!columns.length) {
            this.columns = "*";
        }
        else if (Array.isArray(columns[0])) {
            this.columns = Query.$.apply(Query, columns)[0];
        }
        else if (typeof columns[0] === "object") {
            this.columns = Object.keys(columns[0]).join(", ");
        }
        else {
            this.columns = columns.join(", ");
        }
        this.action = "SELECT";
        return this;
    };
    Query.prototype.insert = function (data) {
        var values = Object.values(data);
        this.columns = Object.keys(data).join(", ");
        this.values = [values.map(function (val, i) { return "$" + (i + 1); }), values];
        this.action = "INSERT";
        return this;
    };
    Query.prototype.evaluate = function () {
        if (this.action === "SELECT") {
            var query = "SELECT " + this.columns + " FROM " + this.table;
            var values = [];
            if (this.conditions) {
                query = query + " WHERE " + this.conditions[0];
                values = this.conditions[1];
            }
            return [query + ";", values];
        }
        if (this.action === "INSERT") {
            return ["INSERT INTO " + this.table + "(" + this.columns + ") VALUES(" + this.values[0] + ");", this.values[1]];
        }
        return "";
    };
    return Query;
}());
exports.default = Query;
