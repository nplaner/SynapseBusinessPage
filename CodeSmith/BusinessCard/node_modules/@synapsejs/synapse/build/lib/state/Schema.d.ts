/** An instance of {@linkcode Schema} defines a set of parameters by name and _fieldtype_ (see {@linkcode Field}). */
export default class Schema {
    fields: object;
    lastError: object;
    /**
     * @param fields An object whose values are all instances of {@linkcode Field} -- herein _fieldset_.
     */
    constructor(fields?: object);
    /** Creates a new schema containing all of the instance's fields, plus additional ```fields```.
     * @param fields A _fieldset_.
     * @returns A new instance of {@linkcode Schema}.
     */
    extend(fields: object): Schema;
    /** Creates a new schema containing a subset of the instance's fields.
     * @param keys The names of the fields which should be transferred to the new schema.
     * @return A new instance of {@linkcode Schema}.
     */
    select(fields?: object | string, ...keys: Array<string>): Schema;
    /** Creates a new schema containing a subset of the instance's fields.
     * @param keys The names of the fields which should not be transferred to the new schema.
     * @return A new instance of {@linkcode Schema}.
     */
    exclude(...keys: any[]): Schema;
    default(values: any): Schema;
    /** _**(async)**_ Determines if the key-value pairs in ```data``` match, or can be converted to, the format of the instance's _fieldset_.
     * @param data An object to validate.
     * @returns A new object containing only the values that have been parsed by corresponding fields in the _fieldset_, or undefined if a corresponding value for any field was not present.
     */
    validate(data: object): Promise<object>;
}
