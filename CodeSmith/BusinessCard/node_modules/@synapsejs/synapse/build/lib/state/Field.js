"use strict";
/* eslint-disable no-bitwise */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Abstract class representing a subset of any primitive value type, herein referred to as a _fieldtype_. For example, a hypothetical ```class Email extends Field``` would represent a subset of ```string``` (i.e. strings that are valid email addresses). A class which extends {@linkcode Field} should define the requirements of its _fieldtype_ by overriding {@linkcode Field.parse|Field.prototype.parse}. Instances of {@linkcode Field} are used to validate values and compose {@linkcode Schema|Schemas}. */
var Field = /** @class */ (function () {
    /**
     * @param defaultVal A {@linkcode Field.default|default} value.
     * @param flags A bit field.
     */
    function Field(defaultVal, flags) {
        if (defaultVal === void 0) { defaultVal = undefined; }
        if (flags === void 0) { flags = null; }
        this.default = defaultVal;
        this.flags = flags;
    }
    /** Checks if the specified flag is set on {@linkcode Field.flags|Field.prototype.flags}.
     * @param flag A bit mask.
     * @returns A boolean determining whether or not the flag is present.
     */
    Field.prototype.hasFlag = function (flag) {
        return !!(this.flags & flag);
    };
    Field.prototype.clone = function () {
        var Type = this.constructor;
        return Object.assign(new Type(), this);
    };
    /** _**(async)**_ Checks if the input ```value``` is, or can be converted to, a valid case of the instance's _fieldtype_. If the input is ```null``` or ```undefined```, uses the {@linkcode Field.default|default} value in its place.
     * @param value The value to be parsed.
     * @returns The parsed value, or ```undefined``` if the ```input``` was invalid.
     */
    Field.prototype.parse = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.lastError = null;
                if (value === undefined || value === null) {
                    return [2 /*return*/, this.default];
                }
                return [2 /*return*/, value];
            });
        });
    };
    Field.Flags = {
        /** _PRIVATE_ denotes that a field should not be exposed. */
        PRV: 2,
    };
    return Field;
}());
exports.default = Field;
