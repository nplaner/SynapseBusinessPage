"use strict";
/* eslint-disable class-methods-use-this */
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-param-reassign */
/* eslint-disable import/no-cycle */
/* eslint-disable import/extensions */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Controllable_1 = require("../abstract/Controllable");
var Collection_1 = require("./Collection");
var Schema_1 = require("./Schema");
var Field_1 = require("./Field");
var Id_1 = require("../fields/Id");
var utility_1 = require("../utility");
var PRV = Field_1.default.Flags.PRV;
/** Abstract class representing a RESTful resource exposed by the synapse API. */
var Resource = /** @class */ (function (_super) {
    __extends(Resource, _super);
    function Resource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Returns the _resource path_ that uniquely locates the instance (i.e. the path to which a ```GET``` request would return the instance). By default, this is the {@linkcode Resource.root|root} path followed by the value on the instance corresponding to the first field on the derived class's schema that extends type {@linkcode Id} (e.g. '/user/123'); however, derived classes may override this behavior. */
    Resource.prototype.calcPath = function () {
        var Class = this.constructor;
        var fields = Class.schema.fields;
        var keys = Object.keys(fields);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (fields[key] instanceof Id_1.default) {
                return utility_1.mergePaths(Class.root(), this[key]);
            }
        }
        throw new Error("No field of type 'Id' found for class " + Class.name + ".");
    };
    Resource.prototype.render = function () {
        var _this = this;
        var Class = this.constructor;
        var fields = Class.schema.fields;
        var result = {};
        Object.keys(fields).forEach(function (key) {
            var field = fields[key];
            if (!field.hasFlag(PRV)) {
                result[key] = _this[key];
            }
        });
        return result;
    };
    /** Returns the _resource path_ from which all endpoints on the derived class originate. */
    Resource.root = function () {
        var Class = this;
        var name = Class.name
            .split(/(?=[A-Z])/)
            .join("_")
            .toLowerCase();
        return "/" + name;
    };
    /** Returns a new {@linkcode Schema} containing all fields of the derived class's schema plus all fields defined on the schemas of each {@linkcode Resource} type in ```Classes```. In case of a collision between field names, precedence will be given to former {@linkcode Resource|Resources} in ```Classes```, with highest precedence given to the derived class on which the method was called.
     * @param Classes The {@linkcode Resource}
     */
    Resource.union = function () {
        var Classes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            Classes[_i] = arguments[_i];
        }
        var fields = [];
        Classes.reverse().forEach(function (Class) {
            if (Class.prototype instanceof Resource) {
                fields.push(Class.schema.fields);
            }
        });
        var Class = this;
        return new Schema_1.default(Object.assign.apply(Object, __spreadArrays([{}], fields, [Class.schema.fields])));
    };
    /** _**(async)**_ Attempts to create a new instance of the derived class from the plain object ```data```. Throws an ```Error``` if ```data``` cannot be validated using the derived class's {@linkcode Resource.schema|schema}.
     * @param data The key-value pairs from which to construct the {@linkcode Resource} instance.
     */
    Resource.restore = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var Type, result, instance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Type = this;
                        return [4 /*yield*/, Type.schema.validate(data)];
                    case 1:
                        result = _a.sent();
                        if (!result) {
                            console.log(data, Type.schema.lastError);
                            throw new Error("Invalid properties for type '" + Type.name + "'.");
                        }
                        instance = new Type(200);
                        Object.keys(result).forEach(function (key) {
                            instance[key] = result[key];
                        });
                        instance.$path(instance.calcPath());
                        instance.$dependencies(instance.$path());
                        return [2 /*return*/, instance];
                }
            });
        });
    };
    Resource.collection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var Type, pending, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Type = this;
                        pending = data.map(function (obj) { return Type.restore(obj); });
                        _a = Collection_1.default.bind;
                        return [4 /*yield*/, Promise.all(pending)];
                    case 1: return [2 /*return*/, new (_a.apply(Collection_1.default, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    Resource.create = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var instance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.restore(data)];
                    case 1:
                        instance = _a.sent();
                        instance.$status(201);
                        return [2 /*return*/, instance];
                }
            });
        });
    };
    return Resource;
}(Controllable_1.default));
exports.default = Resource;
var Validatable_1 = require("../abstract/Validatable");
Object.defineProperty(exports, "field", { enumerable: true, get: function () { return Validatable_1.field; } });
var Controllable_2 = require("../abstract/Controllable");
Object.defineProperty(exports, "expose", { enumerable: true, get: function () { return Controllable_2.expose; } });
Object.defineProperty(exports, "schema", { enumerable: true, get: function () { return Controllable_2.schema; } });
Object.defineProperty(exports, "affects", { enumerable: true, get: function () { return Controllable_2.affects; } });
Object.defineProperty(exports, "uses", { enumerable: true, get: function () { return Controllable_2.uses; } });
