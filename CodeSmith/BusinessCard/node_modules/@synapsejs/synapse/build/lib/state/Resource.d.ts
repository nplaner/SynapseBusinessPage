import Controllable from "../abstract/Controllable";
import Collection from "./Collection";
import Schema from "./Schema";
/** Abstract class representing a RESTful resource exposed by the synapse API. */
export default class Resource extends Controllable {
    /** An instance of {@linkcode Schema} defining the properties necessary to construct an instance of the derived class. */
    static schema: Schema;
    /** Returns the _resource path_ that uniquely locates the instance (i.e. the path to which a ```GET``` request would return the instance). By default, this is the {@linkcode Resource.root|root} path followed by the value on the instance corresponding to the first field on the derived class's schema that extends type {@linkcode Id} (e.g. '/user/123'); however, derived classes may override this behavior. */
    calcPath(): string;
    render(): object;
    /** Returns the _resource path_ from which all endpoints on the derived class originate. */
    static root(): string;
    /** Returns a new {@linkcode Schema} containing all fields of the derived class's schema plus all fields defined on the schemas of each {@linkcode Resource} type in ```Classes```. In case of a collision between field names, precedence will be given to former {@linkcode Resource|Resources} in ```Classes```, with highest precedence given to the derived class on which the method was called.
     * @param Classes The {@linkcode Resource}
     */
    static union(...Classes: Array<typeof Resource>): Schema;
    /** _**(async)**_ Attempts to create a new instance of the derived class from the plain object ```data```. Throws an ```Error``` if ```data``` cannot be validated using the derived class's {@linkcode Resource.schema|schema}.
     * @param data The key-value pairs from which to construct the {@linkcode Resource} instance.
     */
    static restore<T extends typeof Resource>(this: T, data: object): Promise<InstanceType<T>>;
    static collection<T extends typeof Resource>(this: T, data: Array<object>): Promise<Collection>;
    static create<T extends typeof Resource>(this: T, data: object): Promise<InstanceType<T>>;
}
export { field } from "../abstract/Validatable";
export { expose, schema, affects, uses } from "../abstract/Controllable";
