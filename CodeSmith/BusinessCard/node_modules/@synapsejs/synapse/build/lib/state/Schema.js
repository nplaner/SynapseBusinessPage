"use strict";
/* eslint-disable no-bitwise */
/* eslint-disable no-param-reassign */
/* eslint-disable import/extensions */
/* eslint-disable no-await-in-loop */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Field_1 = require("./Field");
var utility_1 = require("../utility");
/** An instance of {@linkcode Schema} defines a set of parameters by name and _fieldtype_ (see {@linkcode Field}). */
var Schema = /** @class */ (function () {
    /**
     * @param fields An object whose values are all instances of {@linkcode Field} -- herein _fieldset_.
     */
    function Schema(fields) {
        if (fields === void 0) { fields = {}; }
        // if the input is a schema, extract its fields
        if (fields instanceof Schema) {
            fields = fields.fields;
        }
        // assert that the input is a collection of fields
        utility_1.isCollectionOf(Field_1.default, fields, true);
        this.fields = fields;
    }
    /** Creates a new schema containing all of the instance's fields, plus additional ```fields```.
     * @param fields A _fieldset_.
     * @returns A new instance of {@linkcode Schema}.
     */
    Schema.prototype.extend = function (fields) {
        // if the input is a schema, extract its fields
        if (fields instanceof Schema) {
            fields = fields.fields;
        }
        // assert that the input is a collection of fields
        utility_1.isCollectionOf(Field_1.default, fields, true);
        return new Schema(__assign(__assign({}, this.fields), fields));
    };
    /** Creates a new schema containing a subset of the instance's fields.
     * @param keys The names of the fields which should be transferred to the new schema.
     * @return A new instance of {@linkcode Schema}.
     */
    Schema.prototype.select = function (fields) {
        var _this = this;
        if (fields === void 0) { fields = null; }
        var keys = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            keys[_i - 1] = arguments[_i];
        }
        if (typeof fields === "object") {
            return this.select.apply(this, Object.keys(fields)).default(fields);
        }
        if (typeof fields === "string") {
            keys.unshift(fields);
        }
        var result = {};
        keys.forEach(function (key) {
            result[key] = _this.fields[key];
        });
        return new Schema(result);
    };
    /** Creates a new schema containing a subset of the instance's fields.
     * @param keys The names of the fields which should not be transferred to the new schema.
     * @return A new instance of {@linkcode Schema}.
     */
    Schema.prototype.exclude = function () {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        var result = __assign({}, this.fields);
        keys.forEach(function (key) {
            delete result[key];
        });
        return new Schema(result);
    };
    Schema.prototype.default = function (values) {
        var _this = this;
        var fields = {};
        Object.keys(this.fields).forEach(function (name) {
            var field = _this.fields[name].clone();
            if (values[name]) {
                field.default = values[name];
            }
            fields[name] = field;
        });
        return new Schema(fields);
    };
    /** _**(async)**_ Determines if the key-value pairs in ```data``` match, or can be converted to, the format of the instance's _fieldset_.
     * @param data An object to validate.
     * @returns A new object containing only the values that have been parsed by corresponding fields in the _fieldset_, or undefined if a corresponding value for any field was not present.
     */
    Schema.prototype.validate = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var keys, parsed, output;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keys = Object.keys(this.fields);
                        return [4 /*yield*/, Promise.all(keys.map(function (key) { return _this.fields[key].parse(data[key]); }))];
                    case 1:
                        parsed = _a.sent();
                        output = {};
                        this.lastError = null;
                        parsed.forEach(function (value, i) {
                            var key = keys[i];
                            if (value === undefined) {
                                // if any result is undefined, the input data is invalid
                                if (!_this.lastError) {
                                    // set the lastError property to a new object and the output to undefined
                                    _this.lastError = {};
                                    output = undefined;
                                }
                                // transfer the error message from the field to the lastError object
                                _this.lastError[key] = _this.fields[key].lastError;
                            }
                            else if (output) {
                                // if no errors have occured yet, transfer the successfully parse value to the output object
                                output[key] = value;
                            }
                        });
                        return [2 /*return*/, output];
                }
            });
        });
    };
    return Schema;
}());
exports.default = Schema;
