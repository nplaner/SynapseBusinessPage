"use strict";
/* eslint-disable no-param-reassign */
/* eslint-disable no-underscore-dangle */
/* eslint-disable import/extensions */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocket = require("ws");
var State_1 = require("../control/State");
var Manager_1 = require("../control/Manager");
var Controller_1 = require("../control/Controller");
var utility_1 = require("../utility");
/** Creates an ```express-ws``` middleware function to handle new WebSocket connections. Receives messages in the form of an object whose keys represent endpoints in the format 'METHOD /path' and whose values are objects containing the arguments to be passed to the associated endpoint.
 */
exports.default = (function (callback, whitelist, peers) {
    if (whitelist === void 0) { whitelist = []; }
    // the WebSocket interface accepts two custom methods
    var customMethods = ["subscribe", "unsubscribe", "update"];
    var initialize = function (socket, req) {
        // when a new connection is received, determine if the client is a peer server
        var isPeer = req.isPeer || whitelist.indexOf(req.connection.remoteAddress) !== -1;
        // create a function to handle updates to that client
        var client = function (path, state, render) {
            var _a;
            if (render === void 0) { render = true; }
            if (isPeer) {
                var ignore = state.$flags().ignore;
                if (!ignore) {
                    console.log(path + " changed -- notifying peers.");
                    socket.send(JSON.stringify((_a = {}, _a["UPDATE " + path] = {}, _a)));
                }
            }
            else {
                // otherwise, return control to the express application using 'callback'
                var _req = {};
                var _res_1 = {
                    locals: state,
                    status: function () { return _res_1; },
                    json: function () {
                        var _a;
                        return socket.send(JSON.stringify((_a = {}, _a[path] = render ? state.render() : state, _a)));
                    },
                };
                callback(_req, _res_1);
            }
        };
        if (isPeer) {
            Manager_1.default.subscribe(client);
        }
        socket.on("message", function (msg) { return __awaiter(void 0, void 0, void 0, function () {
            var data, requests;
            return __generator(this, function (_a) {
                data = utility_1.tryParseJSON(msg);
                if (typeof data !== "object") {
                    return [2 /*return*/, client("?", State_1.default.BAD_REQUEST("Invalid Format"))];
                }
                requests = Object.keys(data);
                return [2 /*return*/, requests.forEach(function (endpoint) { return __awaiter(void 0, void 0, void 0, function () {
                        var _a, method, path, args, state, _b, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    _a = utility_1.parseEndpoint(endpoint, customMethods), method = _a.method, path = _a.path;
                                    if (!method || (method === "update" && !isPeer)) {
                                        return [2 /*return*/, client(endpoint, State_1.default.BAD_REQUEST("Invalid Method"))];
                                    }
                                    args = __assign(__assign({}, req.cookies), data[endpoint]);
                                    if (method === "update") {
                                        console.log(msg);
                                        return [2 /*return*/, Manager_1.default.invalidate(path, { ignore: true })];
                                    }
                                    if (method === "unsubscribe") {
                                        Manager_1.default.unsubscribe(client, path);
                                        return [2 /*return*/, client(endpoint, State_1.default.OK(), false)];
                                    }
                                    if (!(method === "subscribe")) return [3 /*break*/, 2];
                                    return [4 /*yield*/, Controller_1.default.request("get", path, args, { method: method })];
                                case 1:
                                    state = _d.sent();
                                    Manager_1.default.subscribe(client, state.$query());
                                    return [2 /*return*/, client(endpoint, state, false)];
                                case 2:
                                    _b = client;
                                    _c = [endpoint];
                                    return [4 /*yield*/, Controller_1.default.request(method, path, args, { method: method })];
                                case 3: return [2 /*return*/, _b.apply(void 0, _c.concat([_d.sent(), false]))];
                            }
                        });
                    }); })];
            });
        }); });
        // when a client disconnects, cancel all their subscriptions
        socket.on("close", function () {
            Manager_1.default.unsubscribe(client);
        });
    };
    peers.forEach(function (uri) {
        initialize(new WebSocket(uri), { isPeer: true });
    });
    return initialize;
});
