"use strict";
/* eslint-disable import/extensions */
/* eslint-disable no-param-reassign */
/* eslint-disable no-bitwise */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Field_1 = require("../state/Field");
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(min, max, defaultVal, flags) {
        if (min === void 0) { min = null; }
        if (max === void 0) { max = null; }
        if (defaultVal === void 0) { defaultVal = null; }
        if (flags === void 0) { flags = null; }
        var _this = _super.call(this, defaultVal, flags) || this;
        /**
         * Set of rules to validate input.
         * Filled with the RegExp provided when custom fields are created.
         */
        _this.rules = [];
        if (min) {
            _this.assert(".{" + min + "}", true, "must be at least " + min + " characters");
        }
        if (max) {
            _this.assert(".{" + (max + 1) + "}", false, "must be at most " + max + " characters");
        }
        return _this;
    }
    /**
     * Adds a rule to the Text instance.
     * @param rule A regular expression rule
     * @param expect The expected result of matching a string against the regular expression
     * @param message A human-readable explanation of the rule
     */
    Text.prototype.assert = function (rule, expect, message) {
        if (expect === void 0) { expect = true; }
        if (message === void 0) { message = ""; }
        var regex = rule instanceof RegExp ? rule : new RegExp(rule);
        this.rules.push({ regex: regex, expect: expect, message: message });
    };
    /**
     * Verifies that a user's input is in the correct format of a string and that it had passed its RegExp test(s).
     * If the input is null or undefined, obtains the default value if one exists.
     * @param value User input to be checked.
     * @returns Undefined if the value is not a string or if it didn't pass the tests, or the value itself if it does.
     */
    /*
     * Overrides Field.prototype.parse.
     * If the input value is null or undefined, obtains the default value, if one exists.
     * If the input value is a string, determines if the value matches matches all the 'positive' regular expressions and none of the 'negative' ones.
     */
    Text.prototype.parse = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var i, _a, regex, expect_1, message;
            return __generator(this, function (_b) {
                if (!value) {
                    return [2 /*return*/, _super.prototype.parse.call(this, value)];
                }
                if (typeof value === "object" && value.toString) {
                    value = value.toString();
                }
                if (typeof value === "string") {
                    for (i = 0; i < this.rules.length; ++i) {
                        _a = this.rules[i], regex = _a.regex, expect_1 = _a.expect, message = _a.message;
                        if (!!value.match(regex) !== expect_1) {
                            this.lastError = message;
                            return [2 /*return*/, undefined];
                        }
                    }
                    return [2 /*return*/, value];
                }
                return [2 /*return*/, undefined];
            });
        });
    };
    return Text;
}(Field_1.default));
exports.default = Text;
