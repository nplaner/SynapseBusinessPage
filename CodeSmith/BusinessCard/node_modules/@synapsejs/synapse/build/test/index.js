/* eslint-disable import/no-extraneous-dependencies */
var path = require("path");
var express = require("express");
var cookieParser = require("cookie-parser");
var enableWs = require("express-ws");
var cors = require("cors");
var synapse = require("../lib/index").synapse;
var identifier = require("./resources/Session").identifier;
var PORT = process.argv[2] || 3000;
var PEERS = process.argv.slice(3).map(function (port) { return "ws://[::1]:" + port + "/api"; });
var app = express();
enableWs(app);
// standard parsers
app.use(express.json(), express.urlencoded({ extended: true }), cookieParser()); // , cors()
// ensure that all clients have a client_id cookie
app.use("/", identifier);
// initialize an instance of the synapse API with the directory containing the Resource definitions
var api = synapse(path.resolve(__dirname, "./resources")); // ["::1"], PEERS
// define global middleware for all api requests
api.use(function (req, res) {
    var state = res.locals;
    res.status(state.$status()).json(state.render());
});
// route requests to api routers by protocol
app.ws("/api", api.ws);
app.use("/api", api.sse, api.http);
// serve static content
app.use(express.static(path.resolve(__dirname, "./public")));
// catch-all error handlers
app.use(function (req, res) { return res.status(400).send("Not Found"); });
app.use(function (err, req, res, next) {
    console.log(err);
    res.status(err.status || 500).send(err.toString());
});
// if not in test mode, start the server
if (process.env.NODE_ENV !== "test") {
    app.listen(PORT, function () { return console.log("listening on port " + PORT); });
}
module.exports = app;
