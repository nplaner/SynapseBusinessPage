var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
/* eslint-disable no-undef */
var request = require("supertest");
var mongoose = require("mongoose");
var server = require("../index");
describe("HTTP requests", function () {
    afterAll(function (done) { return __awaiter(_this, void 0, void 0, function () {
        var error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, mongoose.disconnect()];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    console.log("Could not disconnect from db *sadface*");
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    describe("GET / ", function () {
        it("Should respond with 200 status", function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request(server).get("/")];
                    case 1:
                        response = _a.sent();
                        expect(response.statusCode).toBe(200);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("GET /api/user ", function () {
        it("Should respond with an array of users", function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request(server).get("/api/user")];
                    case 1:
                        response = _a.sent();
                        expect(response.statusCode).toBe(200);
                        expect(Array.isArray(response.body)).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it("Response body array should contain objects of users", function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request(server).get("/api/user")];
                    case 1:
                        response = _a.sent();
                        expect(response.statusCode).toBe(200);
                        response.body.forEach(function (element) {
                            expect(typeof element).toBe("object");
                            expect(Array.isArray(element)).toBe(false);
                            expect(element).toBeTruthy();
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("POST /api/user ", function () {
        it("Should successfully add another user", function () { return __awaiter(_this, void 0, void 0, function () {
            var responseBefore, postResponse, responseAfter, _id, username, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request(server).get("/api/user")];
                    case 1:
                        responseBefore = _a.sent();
                        return [4 /*yield*/, request(server)
                                .post("/api/user")
                                .send({ username: "Testing", password: "testtesttest", email: "test@gmail.com" })];
                    case 2:
                        postResponse = _a.sent();
                        return [4 /*yield*/, request(server).get("/api/user")];
                    case 3:
                        responseAfter = _a.sent();
                        _id = postResponse._id, username = postResponse.username, email = postResponse.email;
                        expect(responseBefore.statusCode).toBe(200);
                        expect(postResponse.statusCode).toBe(201);
                        expect(responseAfter.statusCode).toBe(200);
                        expect(responseAfter.body.length).toEqual(responseBefore.body.length + 1);
                        expect(typeof responseAfter).toBe("object");
                        expect(username).toEqual("testing");
                        expect(email).toEqual("test@gmail.com");
                        expect(_id).toBeTruthy();
                        return [4 /*yield*/, request(server).delete("/api/user/" + _id)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("Should not update with bad body", function () { return __awaiter(_this, void 0, void 0, function () {
            var body1, body2, body3, body4, res1, res2, res3, res4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body1 = {
                            username: "!te*s t",
                            password: "123",
                            email: "testing.gmail.com",
                        };
                        body2 = {
                            username: "noPassword",
                        };
                        body3 = {
                            password: "noUsername",
                        };
                        body4 = {
                            email: "nobodyorpass@gmail.com",
                        };
                        return [4 /*yield*/, request(server).post("/api/user").send(body1)];
                    case 1:
                        res1 = _a.sent();
                        return [4 /*yield*/, request(server).post("/api/user").send(body2)];
                    case 2:
                        res2 = _a.sent();
                        return [4 /*yield*/, request(server).post("/api/user").send(body4)];
                    case 3:
                        res3 = _a.sent();
                        return [4 /*yield*/, request(server).post("/api/user").send(body4)];
                    case 4:
                        res4 = _a.sent();
                        expect(res1.statusCode).toBe(400);
                        expect(Object.prototype.hasOwnProperty.call(res1.body, "username")).toBeTruthy();
                        expect(Object.prototype.hasOwnProperty.call(res1.body, "password")).toBeTruthy();
                        expect(Object.prototype.hasOwnProperty.call(res1.body, "email")).toBeTruthy();
                        expect(res2.statusCode).toBe(400);
                        expect(Object.prototype.hasOwnProperty.call(res2.body, "password")).toBeTruthy();
                        expect(res3.statusCode).toBe(400);
                        expect(Object.prototype.hasOwnProperty.call(res3.body, "username")).toBeTruthy();
                        expect(res4.statusCode).toBe(400);
                        expect(Object.prototype.hasOwnProperty.call(res4.body, "username")).toBeTruthy();
                        expect(Object.prototype.hasOwnProperty.call(res4.body, "password")).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("PATCH /api/user ", function () { return __awaiter(_this, void 0, void 0, function () {
        var body, userPost, _id;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    body = {
                        username: "validUser",
                        password: "1234567",
                        email: "validemail@gmail.com",
                    };
                    return [4 /*yield*/, request(server).post("/api/user").send(body)];
                case 1:
                    userPost = _a.sent();
                    _id = userPost.body._id;
                    it("Should update a property on user object", function () { return __awaiter(_this, void 0, void 0, function () {
                        var userUpdate, updatedUser;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    userUpdate = {
                                        username: "anotherValidUser",
                                        email: "diffvalidemail@gmail.com",
                                    };
                                    return [4 /*yield*/, request(server).patch("/api/user" + _id).send(userUpdate)];
                                case 1:
                                    updatedUser = _a.sent();
                                    expect(updatedUser.statusCode).toBe(200);
                                    expect(updatedUser.body.username).toBe("anothervaliduser");
                                    expect(updatedUser.body.email).toBe("diffvalidemail@gmail.com");
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it("Should not update with bad body", function () { return __awaiter(_this, void 0, void 0, function () {
                        var invalidUpdate, invalidUser;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    invalidUpdate = {
                                        username: "asd",
                                        email: "badrequest.com",
                                    };
                                    return [4 /*yield*/, request(server).patch("/api/user" + _id).send(invalidUpdate)];
                                case 1:
                                    invalidUser = _a.sent();
                                    expect(invalidUser.statusCode).toBe(400);
                                    expect(Object.prototype.hasOwnProperty.call(invalidUser.body, "username")).toBeTruthy();
                                    expect(Object.prototype.hasOwnProperty.call(invalidUser.body, "email")).toBeTruthy();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    afterAll(function (done) { return __awaiter(_this, void 0, void 0, function () {
                        var error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, request(server).delete("/api/user/" + _id)];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_2 = _a.sent();
                                    console.log("Could not delete user *sadface*");
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
            }
        });
    }); });
    xdescribe("PUT /api/user ", function () { return __awaiter(_this, void 0, void 0, function () {
        var body, user, _id, updateBody, missingProps, invalidProps;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    body = {
                        username: "validuser",
                        password: "validpassword",
                        email: "valid@gmail.com",
                    };
                    return [4 /*yield*/, request(server).post("/api/user").send(body)];
                case 1:
                    user = _a.sent();
                    _id = user.body._id;
                    updateBody = {
                        username: "newname",
                        password: "differentpassword",
                        email: "diffvalid@gmail.com",
                    };
                    missingProps = {
                        email: "newvalidmail@gmail.com",
                    };
                    invalidProps = {
                        username: "@notvalid",
                        password: "1",
                        email: "test.test.com",
                    };
                    it("Should update all properties of user object", function () { return __awaiter(_this, void 0, void 0, function () {
                        var updatedUser, _a, username, email, password;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, request(server).put("/api/user/" + _id).send(updateBody)];
                                case 1:
                                    updatedUser = _b.sent();
                                    expect(updatedUser.statusCode).toBe(200);
                                    _a = updatedUser.body, username = _a.username, email = _a.email, password = _a.password;
                                    expect(username).toBe("newname");
                                    expect(email).toBe("diffvalid@gmail.com");
                                    expect(password).toBeTruthy();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it("Should not update with missing props", function () { return __awaiter(_this, void 0, void 0, function () {
                        var userMissingProps;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, request(server).put("/api/user/" + _id).send(missingProps)];
                                case 1:
                                    userMissingProps = _a.sent();
                                    expect(userMissingProps.statusCode).toBe(400);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it("Should not update if props are not valid", function () { return __awaiter(_this, void 0, void 0, function () {
                        var userInvalidProps;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, request(server).put("/api/user/" + _id).send(invalidProps)];
                                case 1:
                                    userInvalidProps = _a.sent();
                                    expect(userInvalidProps.statusCode).toBe(400);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    afterAll(function (done) { return __awaiter(_this, void 0, void 0, function () {
                        var error_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, request(server).delete("/api/user/" + _id)];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_3 = _a.sent();
                                    console.log("Could not delete user *sadface*");
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
            }
        });
    }); });
    xdescribe("DELETE /api/user ", function () { return __awaiter(_this, void 0, void 0, function () {
        var body, user, _id;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    body = {
                        username: "validuser",
                        password: "validpassword",
                        email: "valid@gmail.com",
                    };
                    return [4 /*yield*/, request(server).post("/api/user").send(body)];
                case 1:
                    user = _a.sent();
                    _id = user.body._id;
                    it("Should successfully delete user", function () { return __awaiter(_this, void 0, void 0, function () {
                        var userGetBefore, deleteUser, userGetAfter, getDeletedUser;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, request(server).get("/api/user")];
                                case 1:
                                    userGetBefore = _a.sent();
                                    return [4 /*yield*/, request(server).delete("/api/user/" + _id)];
                                case 2:
                                    deleteUser = _a.sent();
                                    return [4 /*yield*/, request(server).get("/api/user")];
                                case 3:
                                    userGetAfter = _a.sent();
                                    return [4 /*yield*/, request(server).get("/api/user/" + _id)];
                                case 4:
                                    getDeletedUser = _a.sent();
                                    expect(userGetBefore.body.length).toBe(userGetAfter.body.length + 1);
                                    expect(deleteUser.statusCode).toBe(200);
                                    expect(getDeletedUser.statusCode).toBe(404);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    xit("Should respond with 404 with nonexistant user", function () { return __awaiter(_this, void 0, void 0, function () {
                        var deleteAgain;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, request(server).delete("/api/user/" + _id)];
                                case 1:
                                    deleteAgain = _a.sent();
                                    expect(deleteAgain.statusCode).toBe(404);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
            }
        });
    }); });
});
